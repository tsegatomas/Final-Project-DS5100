Help for Die Class:
Help on class Die in module montecarlo_simulator.montecarlo:

class Die(builtins.object)
 |  Die(faces)
 |  
 |  A class representing a die with N sides, each side having a unique symbol and weight.
 |  
 |  Attributes:
 |      _faces (np.ndarray): An array containing the faces of the die.
 |      _weights (np.ndarray): An array containing the weights associated with each face.
 |      _die_df (pd.DataFrame): A private DataFrame storing faces and weights.
 |  
 |  Methods defined here:
 |  
 |  __init__(self, faces)
 |      Initialize the Die object with faces and default weights.
 |      
 |      Args:
 |          faces (np.ndarray): A NumPy array of unique symbols representing the faces of the die.
 |      
 |      Raises:
 |          TypeError: If faces is not a NumPy array.
 |          ValueError: If faces contain duplicate values.
 |  
 |  change_weight(self, face, new_weight)
 |      Change the weight of a specific face on the die.
 |      
 |      Args:
 |          face: The face whose weight is to be changed.
 |          new_weight (float): The new weight to assign to the face.
 |      
 |      Raises:
 |          IndexError: If the face is not found in the die.
 |          TypeError: If the new weight is not a positive numeric value.
 |  
 |  roll(self, rolls=1)
 |      Roll the die one or more times.
 |      
 |      Args:
 |          rolls (int): Number of times the die should be rolled. Defaults to 1.
 |      
 |      Returns:
 |          list: A list of outcomes for each roll.
 |  
 |  show(self)
 |      Show the current state of the die.
 |      
 |      Returns:
 |          pd.DataFrame: A DataFrame with the faces and their respective weights.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)


Help for Game Class:
Help on class Game in module montecarlo_simulator.montecarlo:

class Game(builtins.object)
 |  Game(dice)
 |  
 |  A class representing a game consisting of rolling one or more dice.
 |  
 |  Attributes:
 |      dice (list): A list of Die objects used in the game.
 |      _results (pd.DataFrame): A private DataFrame storing the results of the game.
 |  
 |  Methods defined here:
 |  
 |  __init__(self, dice)
 |      Initialize the Game with a list of dice.
 |      
 |      Args:
 |          dice (list): A list of Die objects.
 |      
 |      Raises:
 |          TypeError: If the input is not a list of Die objects.
 |  
 |  play(self, rolls=1)
 |      Play the game by rolling all dice a specified number of times.
 |      
 |      Args:
 |          rolls (int): Number of times to roll the dice.
 |      
 |      Returns:
 |          None
 |  
 |  show(self, form='wide')
 |      Show the results of the most recent play.
 |      
 |      Args:
 |          form (str): Format of the results, either 'wide' or 'narrow'. Defaults to 'wide'.
 |      
 |      Returns:
 |          pd.DataFrame: The results in the specified format.
 |      
 |      Raises:
 |          ValueError: If no results are available or the format is invalid.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)


Help for Analyzer Class:
Help on class Analyzer in module montecarlo_simulator.montecarlo:

class Analyzer(builtins.object)
 |  Analyzer(game)
 |  
 |  A class for analyzing the results of a game of dice.
 |  
 |  Attributes:
 |      game (Game): The Game object to analyze.
 |      results (pd.DataFrame): The results of the game in wide format.
 |  
 |  Methods defined here:
 |  
 |  __init__(self, game)
 |      Initialize the Analyzer with a Game object.
 |      
 |      Args:
 |          game (Game): The Game object to analyze.
 |      
 |      Raises:
 |          TypeError: If the input is not a Game object.
 |  
 |  combo_count(self)
 |      Compute the distinct combinations of faces rolled, order-independent.
 |      
 |      Returns:
 |          pd.DataFrame: A DataFrame with combinations and their counts.
 |  
 |  face_counts_per_roll(self)
 |      Compute how many times each face was rolled per event.
 |      
 |      Returns:
 |          pd.DataFrame: A DataFrame with face counts for each roll.
 |  
 |  jackpot(self)
 |      Compute the number of jackpots (all faces are the same).
 |      
 |      Returns:
 |          int: The number of jackpots.
 |  
 |  permutation_count(self)
 |      Compute the distinct permutations of faces rolled, order-dependent.
 |      
 |      Returns:
 |          pd.DataFrame: A DataFrame with permutations and their counts.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)

